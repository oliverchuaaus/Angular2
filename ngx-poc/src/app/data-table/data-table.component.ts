import { Component, OnInit, NgModule } from '@angular/core';
import { LocationStrategy, HashLocationStrategy } from '@angular/common';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpModule } from '@angular/http';

import { Ng2TableModule } from 'ng2-table/ng2-table';
import { PositionTableData } from './position-data';


@Component({
    selector: 'table-demo',
    templateUrl: 'data-table.html',
    moduleId: module.id
})
export class TableDemoComponent implements OnInit {
    public rows: Array<any> = [];
    public columns: Array<any> = [
        { title: 'Auto Generated Time Group', name: 'autoGeneratedTimeGroup', },
        { title: 'Auto Generated Employee Group', name: 'autoGeneratedEmployeeGroup', },
        { title: 'Kronos ESS User', name: 'kronosESSUser' },
        { title: 'Mobile Device License Type', name: 'mobileDeviceLicenseType', },
        { title: 'Functional Access Profile', name: 'functionalAccessProfile' },
        { title: 'Phase', name: 'phase' },
        { title: 'Assign Kronos Pattern', name: 'assignKronosPattern' },
        { title: 'Manually Assigned Time Group', name: 'manuallyAssignedTimeGroup', },
        { title: 'Manually Assigned Employee Group', name: 'manuallyAssignedEmployeeGroup' },
        { title: 'Manually Assigned FAP', name: 'manuallyAssignedFunctionalAccessProfile' },
        { title: 'Last Modified Date', name: 'lastModifiedDate' },
        { title: 'Last Modified User', name: 'lastModifiedUser' }
    ];

    public page: number = 1;
    public itemsPerPage: number = 10;
    public maxSize: number = 5;
    public numPages: number = 1;
    public length: number = 0;

    public config: any = {
        paging: true,
        sorting: { columns: this.columns },
        className: ['table-striped', 'table-bordered']
    };

    private data: Array<any> = PositionTableData;

    public constructor() {
        this.length = this.data.length;
    }

    public ngOnInit(): void {
        this.onChangeTable(this.config);
    }

    public changePage(page: any, data: Array<any> = this.data): Array<any> {
        let start = (page.page - 1) * page.itemsPerPage;
        let end = page.itemsPerPage > -1 ? (start + page.itemsPerPage) : data.length;
        return data.slice(start, end);
    }

    public changeSort(data: any, config: any): any {
        if (!config.sorting) {
            return data;
        }

        let columns = this.config.sorting.columns || [];
        let columnName: string = void 0;
        let sort: string = void 0;

        for (let i = 0; i < columns.length; i++) {
            if (columns[i].sort !== '' && columns[i].sort !== false) {
                columnName = columns[i].name;
                sort = columns[i].sort;
                break;
            }
        }

        if (!columnName) {
            return data;
        }

        // simple sorting
        return data.sort((previous: any, current: any) => {
            if (previous[columnName] > current[columnName]) {
                return sort === 'desc' ? -1 : 1;
            } else if (previous[columnName] < current[columnName]) {
                return sort === 'asc' ? -1 : 1;
            }
            return 0;
        });
    }

    public onChangeTable(config: any, page: any = { page: this.page, itemsPerPage: this.itemsPerPage }): any {
        if (config.sorting) {
            Object.assign(this.config.sorting, config.sorting);
        }

        let sortedData = this.changeSort(this.data, this.config);
        this.rows = page && config.paging ? this.changePage(page, sortedData) : sortedData;
        this.length = sortedData.length;
    }

    public onCellClick(data: Array<any>): any {
        console.log(data);
    }
}